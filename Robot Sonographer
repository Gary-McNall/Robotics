#pragma config(Sensor, S1,     light,               sensorLightActive)
#pragma config(Sensor, S2,     touch,               sensorTouch)
#pragma config(Sensor, S3,     sonar,               sensorSONAR)
#pragma config(Motor,  motorA,          sonarMotor,         tmotorNormal, PIDControl, encoder)
#pragma config(Motor,  motorB,          right,         tmotorNormal, PIDControl, encoder)
#pragma config(Motor,  motorC,          left,          tmotorNormal, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/* *************************************************************** */
/* Program:Robot maze dweller                                    	 */
/* Description: This program will enable a light sensor equipped
   robot to find and follow a black line using a light sensor a
   simple logic.                                                   */
/*		                                                             */
/* Author: Keith (Gary) McNall                       	             */
/* Date: 1/23/12                                                   */
/* References: [1] J. Zhang, In-Class Lecture, Western Washington  */
/*                 University, Fall 2011                     	     */
/* *************************************************************** */
const float dWheels=11.75;//distance between wheels
const float rWheels=2.752 ;//radius of wheels
const float lengthOfFrontRobot=3.0;
const float lengthOfRearRobot=14.0;
const float widthOfRobot=15.0;
const int deltaAngle=2;
const int sonarRange=40;
const int storedCoordinates=300;
const int sweep =180;
float currentHeading=(PI/2);//always start facing north
float currentHeadingInDegrees=(currentHeading*(180/PI));
float currentPositionX=0.001;
float currentPositionY=0.001;
float scanPositions[10][2];
float sonarXCoordinates[storedCoordinates];
float sonarYCoordinates[storedCoordinates];
float totalDistance=0;
float xCoordinatesToMap[storedCoordinates];
float yCoordinatesToMap[storedCoordinates];
int boundry[storedCoordinates][2];
int currentRobotCoords[4][2];
int declaredOrderedPoints=0;
int oldDeclaredOrderedPoints=0;
int declaredBoundries=0;
int declaredCoordinates=0;
int sonarDistance[sweep+5];
int sonarHeading[sweep+5];
int scans=0;

//float nodeArray[20][3];

//prototypes
bool isCriticalPoint(int positionToRight, int position, int positionToLeft);
float appropriateHeading(float heading);
int appropriateHeadingInDegrees(float heading);
float distanceBetween(float x,float y,float i,float j);
float hypotenuse(float x,float y);
bool isEven(int input);
float averageOfFloats(float x,float y);
int averageOf(int x,int y);
float largerValue(float x,float y);
float smallerValue(float x,float y);
void scan();
void resetEncoders();
task pathControl();
task gatherMapData();
void compileMapData();
float radiusOfPath(float pOut, float pIn);
task displayCoordinates();

//Return a heading (in radians) between 0 and 2pi
float appropriateHeading(float heading)
{
  if(heading>(2*PI))
  {
    heading=(heading-2*PI);
  }
  if(heading<0)
  {
    heading=(heading+2*PI);
  }
  return(heading);
}

//Return a heading (in radians) between 0 and 360
int appropriateHeadingInDegrees(float heading)
{
  if(heading>=(360))
  {
    heading=(heading-360);
  }
  if(heading<0)
  {
    heading=(heading+360);
  }
  return(heading);
}

//Return the average of x and y rounded up
int averageOf(int x,int y)
{
  int combined=(x+y);
  if (isEven(combined))
  {
    return((x+y)/2);
  }
  else
  {
    int oddReturn=(((x+y)/2)+.5);
    return(oddReturn);
  }
}

//Return the average of x and y rounded up
float averageOfFloats(float x,float y)
{
  int combined=(x+y);
  if (isEven(combined))
  {
    return((x+y)/2);
  }
  else
  {
    int oddReturn=(((x+y)/2)+.5);
    return(oddReturn);
  }
}

// Calculate the path traveled since the previous iteration.
void calculatePathSegment(float deltaEncoderRight,float deltaEncoderLeft,)
{

  float distanceTraveledRight,distanceTraveledLeft;
  float deltaTheta;
  float deltaPositionX;
  float deltaPositionY;
  float radius;
  distanceTraveledRight=(((deltaEncoderRight*PI*rWheels))/180);
  distanceTraveledLeft=(((deltaEncoderLeft*PI*rWheels))/180);
  if (abs(distanceTraveledRight)>abs(distanceTraveledLeft))
  {
    radius=radiusOfPath(distanceTraveledRight,distanceTraveledLeft);
    deltaTheta=(((distanceTraveledRight-distanceTraveledLeft))/(dWheels));
    deltaPositionX=(radius*((cos(deltaTheta+(currentHeading-(PI/2))))-(cos(currentHeading-(PI/2)))));
    currentPositionX=(currentPositionX+deltaPositionX);
    deltaPositionY=(radius*((sin(deltaTheta+(currentHeading-(PI/2))))-(sin(currentHeading-(PI/2)))));
    currentPositionY=(currentPositionY+deltaPositionY);
    currentHeading=appropriateHeading(currentHeading+deltaTheta);
    currentHeadingInDegrees=(currentHeading*(180/PI));
    totalDistance=(totalDistance+sqrt((deltaPositionX*deltaPositionX)+(deltaPositionY*deltaPositionY)));
  }
  else if(abs(distanceTraveledRight)<abs(distanceTraveledLeft))
  {
    radius=radiusOfPath(distanceTraveledLeft,distanceTraveledRight);
    deltaTheta=((distanceTraveledLeft-distanceTraveledRight)/(dWheels));
    deltaPositionX=(radius*((cos(-deltaTheta+(currentHeading+(PI/2))))-(cos((currentHeading+(PI/2))))));
    currentPositionX=(currentPositionX+deltaPositionX);
    deltaPositionY=(radius*((sin(-deltaTheta+(currentHeading+(PI/2))))-(sin((currentHeading+(PI/2))))));
    currentPositionY=(currentPositionY+deltaPositionY);
    currentHeading=appropriateHeading(currentHeading-deltaTheta);
    currentHeadingInDegrees=(currentHeading*(180/PI));
    totalDistance=(totalDistance+sqrt((deltaPositionX*deltaPositionX)+(deltaPositionY*deltaPositionY)));
  }
  else if((-distanceTraveledRight==distanceTraveledLeft)||(distanceTraveledRight==-distanceTraveledLeft))
  {
    radius=0;
    if (distanceTraveledRight>distanceTraveledLeft)
    {
      deltaTheta=((distanceTraveledRight-distanceTraveledLeft)/(dWheels));
      currentHeading=currentHeading+deltaTheta;
      currentHeadingInDegrees=(currentHeading*(180/PI));
    }
    else
    {
      deltaTheta=((distanceTraveledLeft-distanceTraveledRight)/(dWheels));
      currentHeading=currentHeading-deltaTheta;
      currentHeadingInDegrees=(currentHeading*(180/PI));
    }
  }
  else
  {
    float avgDistance =((distanceTraveledLeft+distanceTraveledRight)/2);
    currentPositionX=(currentPositionX+(avgDistance*(cos(currentHeading))));
    currentPositionY=(currentPositionY+(avgDistance*(sin(currentHeading))));
    totalDistance=(totalDistance+avgDistance);
  }
}

// Generate a Map to display to the NXT
void compileMapData()
{
  int winner=0;
  int i;
  float largestSonarXValue;
  float largestSonarYValue;
  float smallestSonarYValue;
  float smallestSonarXValue;
  float largestPathXValue;
  float largestPathYValue;
  float smallestPathYValue;
  float smallestPathXValue;
  float aspectRatio;
  for (i=0; i<declaredBoundries; i++)
	{
		if (sonarXCoordinates[i]>sonarXCoordinates[winner])
		{
		  winner=i;
		}
	}
	largestSonarXValue=sonarXCoordinates[winner];
	winner=0;
	for (i=0; i<declaredBoundries; i++)
	{
		if (sonarXCoordinates[i]<sonarXCoordinates[winner])
		{
		  winner=i;
		}
	}
	smallestSonarXValue=sonarXCoordinates[winner];
	winner=0;
  for (i=0; i<declaredBoundries; i++)
	{
		if (sonarYCoordinates[i]>sonarYCoordinates[winner])
		{
		  winner=i;
		}
	}
	largestSonarYValue=sonarYCoordinates[winner];
	winner=0;
  for (i=0; i<declaredBoundries; i++)
	{
		if (sonarYCoordinates[i]<sonarYCoordinates[winner])
		{
		  winner=i;
		}
	}
	smallestSonarYValue=sonarYCoordinates[winner];
  for (i=0; i<declaredCoordinates; i++)
	{
		if (xCoordinatesToMap[i]>xCoordinatesToMap[winner])
		{
		  winner=i;
		}
	}
	largestPathXValue=xCoordinatesToMap[winner];
	winner=0;
	for (i=0; i<declaredCoordinates; i++)
	{
		if (xCoordinatesToMap[i]<xCoordinatesToMap[winner])
		{
		  winner=i;
		}
	}
	smallestPathXValue=xCoordinatesToMap[winner];
	winner=0;
  for (i=0; i<declaredCoordinates; i++)
	{
		if (yCoordinatesToMap[i]>yCoordinatesToMap[winner])
		{
		  winner=i;
		}
	}
	largestPathYValue=yCoordinatesToMap[winner];
	winner=0;
  for (i=0; i<declaredCoordinates; i++)
	{
		if (yCoordinatesToMap[i]<yCoordinatesToMap[winner])
		{
		  winner=i;
		}
	}
	smallestPathYValue=yCoordinatesToMap[winner];
	float largestSonarValue=largerValue(largestSonarXValue,largestSonarYValue);
	float smallestSonarValue = smallerValue(smallestSonarXValue,smallestSonarYValue);
	float largestPathValue=largerValue(largestPathXValue,largestPathYValue);
	float smallestPathValue=smallerValue(smallestPathXValue,smallestPathYValue);
	float largestValue=largerValue(largestPathValue,largestSonarValue)+15;
	float smallestValue=smallerValue(smallestPathValue,smallestSonarValue)-15;
	aspectRatio=((largestValue-smallestValue)/63);
	if (aspectRatio<0.5555)
	{
	  aspectRatio=(0.5555);
	}
  for (i=0; i<declaredBoundries; i++)
  {
    int mapDataX=(((sonarXCoordinates[boundry[i][0]]-smallestValue)/aspectRatio));
    int mapDataY=(((sonarYCoordinates[boundry[i][0]]-smallestValue)/aspectRatio));
    int mapDataX2=(((sonarXCoordinates[boundry[i][1]]-smallestValue)/aspectRatio));
    int mapDataY2=(((sonarYCoordinates[boundry[i][1]]-smallestValue)/aspectRatio));
    nxtDrawLine(mapDataX, mapDataY, mapDataX2, mapDataY2);
  }
  if (declaredCoordinates>0)
  {
    float distance=hypotenuse((widthOfRobot/2),lengthOfFrontRobot);
    float sinAngle =((widthOfRobot/2)/distance);
    currentRobotCoords[0][0]=((xCoordinatesToMap[declaredCoordinates-1]-smallestValue+(cos(appropriateHeading(currentHeading-(asin(sinAngle))))*distance))/aspectRatio);
    currentRobotCoords[0][1]=((yCoordinatesToMap[declaredCoordinates-1]-smallestValue+(sin(appropriateHeading(currentHeading-(asin(sinAngle))))*distance))/aspectRatio);
    currentRobotCoords[1][0]=((xCoordinatesToMap[declaredCoordinates-1]-smallestValue+(cos(appropriateHeading(currentHeading+(asin(sinAngle))))*distance))/aspectRatio);
    currentRobotCoords[1][1]=((yCoordinatesToMap[declaredCoordinates-1]-smallestValue+(sin(appropriateHeading(currentHeading+(asin(sinAngle))))*distance))/aspectRatio);
    distance=hypotenuse((widthOfRobot/2),lengthOfRearRobot);
    sinAngle =((widthOfRobot/2)/distance);
    currentRobotCoords[2][0]=((xCoordinatesToMap[declaredCoordinates-1]-smallestValue-(cos(appropriateHeading(currentHeading-(asin(sinAngle))))*distance))/aspectRatio);
    currentRobotCoords[2][1]=((yCoordinatesToMap[declaredCoordinates-1]-smallestValue-(sin(appropriateHeading(currentHeading-(asin(sinAngle))))*distance))/aspectRatio);
    currentRobotCoords[3][0]=((xCoordinatesToMap[declaredCoordinates-1]-smallestValue-(cos(appropriateHeading(currentHeading+(asin(sinAngle))))*distance))/aspectRatio);
    currentRobotCoords[3][1]=((yCoordinatesToMap[declaredCoordinates-1]-smallestValue-(sin(appropriateHeading(currentHeading+(asin(sinAngle))))*distance))/aspectRatio);
    //Directional Vector
    int projectedX=((xCoordinatesToMap[declaredCoordinates-1]-smallestValue+(cos(appropriateHeading(currentHeading))*5))/aspectRatio);
    int projectedY=((yCoordinatesToMap[declaredCoordinates-1]-smallestValue+(sin(appropriateHeading(currentHeading))*5))/aspectRatio);
    int mapDataX=(((xCoordinatesToMap[declaredCoordinates-1]-smallestValue)/aspectRatio));
    int mapDataY=(((yCoordinatesToMap[declaredCoordinates-1]-smallestValue)/aspectRatio));
    // draw robot
    nxtDrawLine(mapDataX,mapDataY,projectedX,projectedY);
    nxtDrawLine(currentRobotCoords[0][0], currentRobotCoords[0][1], currentRobotCoords[1][0], currentRobotCoords[1][1]);
    nxtDrawLine(currentRobotCoords[0][0], currentRobotCoords[0][1], currentRobotCoords[3][0], currentRobotCoords[3][1]);
    nxtDrawLine(currentRobotCoords[1][0], currentRobotCoords[1][1], currentRobotCoords[2][0], currentRobotCoords[2][1]);
    nxtDrawLine(currentRobotCoords[2][0], currentRobotCoords[2][1], currentRobotCoords[3][0], currentRobotCoords[3][1]);
    nxtDrawLine(currentRobotCoords[2][0], currentRobotCoords[2][1], currentRobotCoords[3][0], currentRobotCoords[3][1]);
    }
}

task displayCoordinates()
{
  while (true)
  {
    eraseDisplay();
    nxtDisplayStringAt(70,55, "%.2f",currentPositionX);
    nxtDisplayStringAt(70,45, "%.2f",currentPositionY);
    nxtDisplayStringAt(70,35, "%.2f",currentHeadingInDegrees);
    nxtDisplayStringAt(70,25, "%.2f",totalDistance);
    compileMapData();
    wait1Msec(1000);
  }
}

float distanceBetween(float x,float y,float i,float j)
{
  float hypotenuse=(sqrt(((x-i)*(x-i))+((y-j)*(y-j))));
  return (hypotenuse);
}

task gatherMapData()
{
  ClearTimer(T4);
  while (true)
  {
  float psuedoTimer;
  int i=0;
  while (i <storedCoordinates)
  {
    psuedoTimer=time1[T4];
    if (psuedoTimer >=500)
    {
      xCoordinatesToMap[i]=currentPositionX;
      yCoordinatesToMap[i]=currentPositionY;
      declaredCoordinates++;
      ClearTimer(T4);
      i++;
    }
  }
  }
}

// return the hypotenuse of 2 floats
float hypotenuse(float x,float y)
{
  return(sqrt((x*x)+(y*y)));
}

// return if a value is a local min or local max of 3 points
bool isCriticalPoint(int positionToRight,int position,int positionToLeft)
{
  if(((position>positionToRight)&&(position>positionToLeft))||((position<positionToRight)&&(position<positionToLeft)))
  {
    return(true);
  }
  else
  {
    return(false);
  }
}

bool isEven(int input)
{
  while (input>0)
  {
    input=(input-2);
  }
  if (input==0)
  {
    return(true);
  }
  else
  {
    return(false);
  }
}
// return the larger of x and y
float largerValue(float x,float y)
{
  if(x>y)
  {
    return(x);
  }
  else
  {
    return(y);
  }
}

// The main task of tracking the robots position
// mainly controls the input to calculate path segments and makes sure the the motor encoders are resonably small.
task pathControl()
{
  float deltaEncoderRight;
	float lastEncoderRight=0;
	float deltaEncoderLeft;
	float lastEncoderLeft=0;
	int timer;
  ClearTimer(T3); // declarations for first iteration
	resetEncoders();
	while(true)
  {
    timer=time1[T3];
    deltaEncoderRight=(nMotorEncoder[right]-lastEncoderRight);
    lastEncoderRight=(nMotorEncoder[right]);
    deltaEncoderLeft=(nMotorEncoder[left]-lastEncoderLeft);
    lastEncoderLeft=(nMotorEncoder[left]);
    if ((nMotorEncoder[left]==-30000)||(nMotorEncoder[left]==30000)||(nMotorEncoder[right]==-30000)||(nMotorEncoder[right]==30000))
    {
     resetEncoders();
    }
    else if ((deltaEncoderRight==0)&&(deltaEncoderLeft==0))
    {
    }
    else
    {
      calculatePathSegment(deltaEncoderRight,deltaEncoderLeft);
    }
  }
}
// calculates the radius of the robots current path.
float radiusOfPath(float pOut, float pIn)
{
  if(pOut==0)
  {
    return(dWheels/2);
  }
  else
  {
    float radiusOfPath =((dWheels*(1+(pIn/(pOut))))/(2*(1-(pIn/(pOut)))));
    return(radiusOfPath);
  }
}

void resetEncoders() // reset the motor encoders
{
  nMotorEncoder[right] = 0;
  nMotorEncoder[left] = 0;
}

void scan()
{
  scanPositions[scans][0]=currentPositionX;
  scanPositions[scans][1]=currentPositionY;
  //Begin data collection
  int deltaSonar=0;
  int iterations=0;
  int i;
  int averageDistance=0;
  float averageAdjecentDistance;
  nMotorEncoder[sonarMotor]=0;
  nMotorEncoderTarget[motorA] = -(sweep*deltaAngle);
  motor[motorA] =-6;
  while(nMotorRunState[motorA] != runStateIdle)
  {
    int currentSonarHeading=(abs(nMotorEncoder[sonarMotor]));
    deltaSonar=currentSonarHeading-(iterations*deltaAngle);
    if (deltaSonar==deltaAngle)
    {
      sonarDistance[iterations]=(SensorValue(sonar));
      sonarHeading[iterations]=(currentSonarHeading);
      iterations++;
    }
  }
  iterations=0;
  motor[sonarMotor] = 0;
  nMotorEncoder[sonarMotor]=0;
  nMotorEncoderTarget[sonarMotor] =(sweep*deltaAngle);
  motor[sonarMotor]=6;
  while(nMotorRunState[sonarMotor] != runStateIdle)
  {
    int currentSonarHeading=(abs(nMotorEncoder[sonarMotor]));
    deltaSonar=currentSonarHeading-(iterations*deltaAngle);
    if (deltaSonar==deltaAngle)
    {
      sonarDistance[sweep-(iterations)]=(SensorValue(sonar));
      sonarHeading[(sweep)-(iterations)]=averageOf((360-currentSonarHeading),sonarHeading[sweep-iterations]);
      iterations++;
    }

  }
  motor[motorA] = 0;
  //End data collection

  //Factor in the current heading and establish average range of distances
  iterations=0;
  for(i=0;i<sweep;i++)
  {
    sonarHeading[i]=appropriateHeadingInDegrees(sonarHeading[i]+currentHeadingInDegrees);
    if (sonarDistance[i]<=sonarRange)
    {
      averageDistance=averageDistance+sonarDistance[i];
      iterations++;
    }
  }
  averageDistance=(averageDistance/iterations);

  //Begin Data Purification
  int sonarAngle;
  for(sonarAngle=0;sonarAngle<sweep;sonarAngle++)
  {
    if(sonarDistance[sonarAngle]>sonarRange)//if out of range, declare as negative field
    {
      sonarDistance[sonarAngle]=-1;
    }
    if (sonarAngle==0)
    {
       if(sonarDistance[sonarAngle]==0)// if undeclared, take average of surrounding points
       {
         sonarDistance[sonarAngle]=averageOf(sonarDistance[sweep-1],sonarDistance[sonarAngle+1]);
       }
    }
    else if (sonarAngle==(sweep-1))
    {
      if(sonarDistance[sonarAngle]==0)
       {
         sonarDistance[sonarAngle]=averageOf(sonarDistance[sonarAngle-1],sonarDistance[0]);
       }
    }
    else
    {
      if(sonarDistance[sonarAngle]==0)
      {
        sonarDistance[sonarAngle]=averageOf(sonarDistance[sonarAngle-1],sonarDistance[sonarAngle+1]);
      }
    }
  }
  for(sonarAngle=0;sonarAngle<sweep;sonarAngle++)//Normalize Data, eliminate small data spikes
  {
   if (sonarAngle==0)
   {
     if (sonarDistance[sweep-1]==sonarDistance[sonarAngle+1])// if the data points around another are equvilant
     {
       sonarDistance[sonarAngle]=sonarDistance[sonarAngle+1];// set the data point equal to the surrounding
     }
     if((sonarDistance[sweep-1]>0)&&(sonarDistance[sonarAngle+1]>0)&&((sonarDistance[sonarAngle]==-1)))
     {
       sonarDistance[sonarAngle]=averageOf(sonarDistance[sweep-1],sonarDistance[sonarAngle+1]);
     }
   }
   else if (sonarAngle==(sweep-1))
   {
     if (sonarDistance[sonarAngle-1]==sonarDistance[0])
     {
       sonarDistance[sonarAngle]=sonarDistance[sonarAngle+1];
     }
     if((sonarDistance[sonarAngle-1]>0)&&(sonarDistance[0]>0)&&((sonarDistance[sonarAngle]==-1)))
     {
       sonarDistance[sonarAngle]=averageOf(sonarDistance[sonarAngle-1],sonarDistance[0]);
     }
   }
   else
   {
     if ((sonarDistance[sonarAngle-1]==sonarDistance[sonarAngle+1]))
     {
       sonarDistance[sonarAngle]=sonarDistance[sonarAngle+1];
     }
     if((sonarDistance[sonarAngle-1]>0)&&(sonarDistance[sonarAngle+1]>0)&&((sonarDistance[sonarAngle]==-1)))
     {
       sonarDistance[sonarAngle]=averageOf(sonarDistance[sonarAngle-1],sonarDistance[sonarAngle+1]);
     }
   }
  }
  for(sonarAngle=0;sonarAngle<sweep;sonarAngle++)//Normalize Data, eliminate Large data spikes
  {
   if (sonarAngle==0)
   {
     if ((sonarDistance[sweep-1]>0)&&(sonarDistance[sonarAngle+1]>0))
     {
      averageAdjecentDistance=(averageOf(sonarDistance[sweep-1],sonarDistance[sonarAngle+1]));
      if ((sonarDistance[sonarAngle]>averageAdjecentDistance+(averageDistance/5))||(sonarDistance[sonarAngle]< averageAdjecentDistance-(averageDistance/5)))
      {
        sonarDistance[sonarAngle]=averageOf(sonarDistance[sweep-1],sonarDistance[sonarAngle+1]);
      }
     }
     else if (((sonarDistance[sweep-1]<0)&&(sonarDistance[sonarAngle+1]>0))||((sonarDistance[sweep-1]>0)&&(sonarDistance[sonarAngle+1]<0)))
     {
     }
     else
     {
       sonarDistance[sonarAngle]=-1;
     }

   }
   else if (sonarAngle==(sweep-1))
   {
     if ((sonarDistance[sonarAngle-1]>0)&&(sonarDistance[0]>0))
     {
      averageAdjecentDistance=(averageOf(sonarDistance[sonarAngle-1],sonarDistance[0]));
      if ((sonarDistance[sonarAngle]>averageAdjecentDistance+(averageDistance/5))||(sonarDistance[sonarAngle]< averageAdjecentDistance-(averageDistance/5)))
      {
        sonarDistance[sonarAngle]=averageOf(sonarDistance[sonarAngle-1],sonarDistance[0]);
      }
     }
     else if (((sonarDistance[sonarAngle-1]<0)&&(sonarDistance[0]>0))||((sonarDistance[sonarAngle-1]>0)&&(sonarDistance[0]<0)))
     {
     }
     else
     {
       sonarDistance[sonarAngle]=-1;
     }

   }
   else
   {
     if ((sonarDistance[sonarAngle-1]>0)&&(sonarDistance[sonarAngle+1]>0))
     {
      averageAdjecentDistance=(averageOf(sonarDistance[sonarAngle-1],sonarDistance[sonarAngle+1]));
      if ((sonarDistance[sonarAngle]>averageAdjecentDistance+(averageDistance/5))||(sonarDistance[sonarAngle]< averageAdjecentDistance-(averageDistance/5)))
      {
        sonarDistance[sonarAngle]=averageOf(sonarDistance[sonarAngle-1],sonarDistance[sonarAngle+1]);
      }
     }
     else if (((sonarDistance[sonarAngle-1]<0)&&(sonarDistance[sonarAngle+1]>0))||((sonarDistance[sonarAngle-1]>0)&&(sonarDistance[sonarAngle+1]<0)))
     {
     }
     else
     {
       sonarDistance[sonarAngle]=-1;
     }
   }
  }

  // FOCUS ON REPRESENTITIVE HEADINGS
  i=0;
  int w=0;
  int dataPointsDeclared=0;
  int selectedInterval;
  while (i < sweep)
  {
    int checkValue=sonarDistance[i];
    w=i;
    while (sonarDistance[w]==checkValue)
    {
      if (w==sweep-1)
      {
       w++;
       break;
      }
      else
      {
        w++;
      }
    }
    if (w!=i)
    {
	    int deltaW=(w-i);
	    if(deltaW!=1)
	    {
	      selectedInterval=(averageOf(deltaW,0));
	    }
	    else
	    {
	      selectedInterval=0;
	    }
      sonarDistance[dataPointsDeclared]=sonarDistance[selectedInterval+i];
      sonarHeading[dataPointsDeclared]=sonarHeading[selectedInterval+i];
      dataPointsDeclared++;
      i=w;
    }
    /*for(i=dataPointsDeclared;i<sweep;i++)
    {
      sonarDistance[i]=0;
      sonarHeading[i]=0;
    }*/
    // FOCUS ABOVE
  }
  // Eliminate Data Spikes.
  //Eliminate Data Redundencies.
  int orderedCriticalPoints[100];
  for(i=0;i<dataPointsDeclared;i++)
  {
    if (sonarDistance[i]>0)
    {
		  if (i==0)
		  {
		    if ((sonarDistance[dataPointsDeclared-1]>1)&&(sonarDistance[i+1]>1))
		    {
		      if (isCriticalPoint(sonarDistance[dataPointsDeclared-1],sonarDistance[i],sonarDistance[i+1]))
		      {
		        orderedCriticalPoints[declaredOrderedPoints]=i;
		        declaredOrderedPoints++;
		      }
		    }
		    else
		    {
		      orderedCriticalPoints[declaredOrderedPoints]=i;
		      declaredOrderedPoints++;
		    }
		  }
		  else if(i==dataPointsDeclared-1)
		  {
		   if((sonarDistance[i-1]>1)&&(sonarDistance[0]>1))
		   {
		      if (isCriticalPoint(sonarDistance[i-1],sonarDistance[i],sonarDistance[0]))
		      {
            orderedCriticalPoints[declaredOrderedPoints]=i;
		        declaredOrderedPoints++;
		      }
		    }
		    else
		    {
		      orderedCriticalPoints[declaredOrderedPoints]=i;
		      declaredOrderedPoints++;
		    }
		  }
		  else
		  {
		    if((sonarDistance[i-1]>1)&&(sonarDistance[i+1]>1))
		    {
		      if (isCriticalPoint(sonarDistance[i-1],sonarDistance[i],sonarDistance[i+1]))
		      {
            orderedCriticalPoints[declaredOrderedPoints]=i;
		        declaredOrderedPoints++;
		      }
		    }
		    else
		    {
		      orderedCriticalPoints[declaredOrderedPoints]=i;
		      declaredOrderedPoints++;
		    }
		  }
	  }
  }
  // Optimize Boundry accuracy.
  // If two critical points are too close to eachother, combine them into one critical point.
  /*for(i=oldDeclaredOrderedPoints;i<declaredOrderedPoints-1;i++)
  {
    if((i!=declaredOrderedPoints-1)&&(sonarDistance[i+1]>0)&&(sonarDistance[i]>0))
    {
      float deltaHeading=abs(sonarHeading[orderedCriticalPoints[i]]-sonarHeading[orderedCriticalPoints[i+1]]);
      float a=sonarDistance[orderedCriticalPoints[i]];
      float b=sonarDistance[orderedCriticalPoints[i+1]];
      float c=sqrt((a*a)+(b*b)-(2*a*b*cos(degreesToRadians(deltaHeading))));
      if (c <=5)
      {
        sonarHeading[orderedCriticalPoints[i]]=(sonarHeading[orderedCriticalPoints[i]]+deltaHeading);
        sonarDistance[orderedCriticalPoints[i]]=averageOf(a,b);
        int w;
        for (w=i+1;w<declaredOrderedPoints-1;w++)
        {
          orderedCriticalPoints[w]=orderedCriticalPoints[w+1];
          orderedCriticalPoints[declaredOrderedPoints-1]=0;
        }
        declaredOrderedPoints=declaredOrderedPoints-1;
        oldDeclaredOrderedPoints++;
      }
    }
    if((i==declaredOrderedPoints-1)&&(sonarDistance[0]>0)&&(sonarDistance[i]>0))
    {
      float deltaHeading=abs(sonarHeading[orderedCriticalPoints[i]]-sonarHeading[orderedCriticalPoints[oldDeclaredOrderedPoints]]);
      float a=sonarDistance[orderedCriticalPoints[i]];
      float b=sonarDistance[orderedCriticalPoints[oldDeclaredOrderedPoints]];
      float c=sqrt((a*a)+(b*b)-(2*a*b*cos(degreesToRadians(deltaHeading))));
      if (c <=5)
      {
        sonarHeading[orderedCriticalPoints[oldDeclaredOrderedPoints]]=(sonarHeading[orderedCriticalPoints[i]]+deltaHeading);
        sonarDistance[orderedCriticalPoints[oldDeclaredOrderedPoints]]=averageOf(a,b);
        orderedCriticalPoints[declaredOrderedPoints-1]=0;
        declaredOrderedPoints=declaredOrderedPoints-1;
        oldDeclaredOrderedPoints++;
      }
    }
  }*/
  for(i=oldDeclaredOrderedPoints;i<declaredOrderedPoints;i++)
  {
    sonarXCoordinates[i]=currentPositionX+(sonarDistance[orderedCriticalPoints[i]]*cosDegrees((sonarHeading[orderedCriticalPoints[i]])));
    sonarYCoordinates[i]=currentPositionY+(sonarDistance[orderedCriticalPoints[i]]*sinDegrees((sonarHeading[orderedCriticalPoints[i]])));

  }
  for(i=oldDeclaredOrderedPoints;i<declaredOrderedPoints-1;i++)
  {
    int w;
    for (w=0;w<oldDeclaredOrderedPoints-1;w++)
    {
      float distance =distanceBetween(sonarXCoordinates[i],sonarYCoordinates[i],sonarXCoordinates[w],sonarYCoordinates[w]);
      if (distance<=(averageDistance/8))
      {
        sonarXCoordinates[w]=(averageOfFloats(sonarXCoordinates[i],sonarXCoordinates[w]));
        sonarYCoordinates[w]=(averageOfFloats(sonarYCoordinates[i],sonarYCoordinates[w]));
        sonarXCoordinates[i]=sonarXCoordinates[w];
        sonarYCoordinates[i]=sonarYCoordinates[w];
      }
    }
    if (i==declaredOrderedPoints-1)
    {
      float distance =distanceBetween(sonarXCoordinates[i],sonarYCoordinates[i],sonarXCoordinates[oldDeclaredOrderedPoints],sonarYCoordinates[oldDeclaredOrderedPoints]);
      if (distance<=(averageDistance/8))
      {
        sonarXCoordinates[oldDeclaredOrderedPoints]=averageOfFloats(sonarXCoordinates[i],sonarXCoordinates[oldDeclaredOrderedPoints]);
        sonarYCoordinates[oldDeclaredOrderedPoints]=averageOfFloats(sonarYCoordinates[i],sonarYCoordinates[oldDeclaredOrderedPoints]);
        sonarXCoordinates[i]=sonarXCoordinates[oldDeclaredOrderedPoints];
        sonarYCoordinates[i]=sonarYCoordinates[oldDeclaredOrderedPoints];
      }
    }
  }
 // declare boundries
  int difference;
  // declare boundries
  for(i=oldDeclaredOrderedPoints;i<declaredOrderedPoints;i++)
  {
    bool isOpenSpace=false;
    if(i!=declaredOrderedPoints-1)
    {
      difference=abs(orderedCriticalPoints[i]-orderedCriticalPoints[i+1]);
      for (w=0;w<difference;w++)
      {
        if(sonarDistance[orderedCriticalPoints[i]+w]==-1)
        {
          isOpenSpace=true;
        }
      }
	    if(isOpenSpace==false)
	    {
        boundry[declaredBoundries][0]=i;
        boundry[declaredBoundries][1]=i+1;
        declaredBoundries++;
	    }
	  }
	  if(i==declaredOrderedPoints-1)
	  {
	    difference=abs(oldDeclaredOrderedPoints-orderedCriticalPoints[oldDeclaredOrderedPoints]);
	    for (w=0;w<difference;w++)
      {
        if((sonarDistance[orderedCriticalPoints[i]+w]==-1))
        {
          isOpenSpace=true;
        }
      }
	    if (isOpenSpace==false)
	    {
	      boundry[declaredBoundries][0]=i;
		    boundry[declaredBoundries][1]=oldDeclaredOrderedPoints;
		    declaredBoundries++;
	    }
	  }
  }
  //Combine Redundant Borders
  int r;
  for(i=oldDeclaredOrderedPoints;i<declaredOrderedPoints-1;i++)
  {
    for (w=0;w<oldDeclaredOrderedPoints-1;w++)
    {
      if ((sonarXCoordinates[w]==sonarXCoordinates[i])&&(sonarYCoordinates[w]==sonarYCoordinates[i]))
      {
	      for(r=0;r<declaredBoundries;r++)
	      {
	        if (boundry[r][1]==i)
	        {
	          boundry[r][1]=w;
	        }
	        if (boundry[r][0]==i)
	        {
	          boundry[r][0]=w;
	        }
	      }
	      for (r=i;r<declaredOrderedPoints-1;r++)
	      {
	        sonarXCoordinates[r]=sonarXCoordinates[r+1];
	        sonarYCoordinates[r]=sonarYCoordinates[r+1];
	      }
	      declaredOrderedPoints--;
      }
    }
  }
   //Eliminate Border Duplicates
  for(i=0;i<declaredBoundries;i++)
  {
    for(w=i+1;w<declaredBoundries;w++)
    {
      if(((boundry[i][0]==boundry[w][0])&&(boundry[i][1]==boundry[w][1])||(boundry[i][0]==boundry[w][1])&&(boundry[i][1]==boundry[w][0])))
      {
        for(r=w;r<declaredBoundries-1;r++)
        {
          boundry[r][0]=boundry[r+1][0];
          boundry[r][1]=boundry[r+1][1];
        }
        declaredBoundries--;
      }
    }
  }
  // subtract one from all coords in scan rangear
  scans++;
  oldDeclaredOrderedPoints=declaredOrderedPoints;
}

float smallerValue(float x,float y)
{
  if(x<y)
  {
    return(x);
  }
  else
  {
    return(y);
  }
}


task main()
{
  StartTask(displayCoordinates);
  StartTask(gatherMapData);
  StartTask(pathControl);
  bFloatDuringInactiveMotorPWM = false;
  while(true)
  {
    if(SensorValue(touch)==1)
    {
      scan();
    }
  }
}
